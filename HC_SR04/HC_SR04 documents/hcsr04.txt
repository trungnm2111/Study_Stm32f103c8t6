TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
TIM_OCInitTypeDef  TIM_OCInitStructure;
GPIO_InitTypeDef GPIO_InitStructure;


void TIM_Init_HC_SR04(void)
{
  /* Enable timer 2 clock */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

  /* Configure timer 2 */
  TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
  TIM_TimeBaseStructure.TIM_Prescaler = 72-1; // 1MHz clock
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

  /* Configure timer 2 output compare for trigger signal */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = 10; // 10us high pulse
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OC1Init(TIM2, &TIM_OCInitStructure);
  TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);

  TIM_Cmd(TIM2, ENABLE); // start timer 2
}


float HC_SR04_Distance(void)
{
  uint32_t count = 0;
  float distance = 0;
  
  // Set trigger pin high for 10us
  GPIO_SetBits(GPIOA, GPIO_Pin_1);
  Delay_us(10);
  GPIO_ResetBits(GPIOA, GPIO_Pin_1);

  // Wait for echo pin to go high
  while(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == RESET);
  
  // Start timer
  TIM_SetCounter(TIM2, 0);
  
  // Wait for echo pin to go low
  while(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0) == SET);
  
  // Get timer count
  count = TIM_GetCounter(TIM2);
  
  // Convert count to distance (in cm)
  distance = count / 58.0f;
  
  return distance;
}

void GPIO_Init_HC_SR04(void)
{
  /* Enable GPIOA and GPIOB clocks */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);

  /* Configure PA0 (Echo) as input floating */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOA, &GPIO_InitStructure);

  /* Configure PA1 (Trig) as output push-pull */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
}
